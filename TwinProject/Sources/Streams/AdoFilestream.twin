[ COMCreatable (False) ]
[ ClassId ("D6D4CDA2-35E3-4E96-9327-92C449EF9A35") ]
Private Class AdoFilestream
    Implements IFileStream
    Implements ISequentialInStream
    Implements IInStream
    Implements IOutStream
    Implements ISequentialOutStream
    Implements IOutStreamFinish
    Implements IStreamGetProps
    Implements IStreamGetProps2
    Implements IStreamGetSize

    Private Type TData
        Mode As FileMode
    	FileNum As Integer
        FilePath As String
        Stream As ADODB.Stream
    End Type
    Private This As TData

    Public Sub New(FilePath As String, Mode As FileMode) Implements IFileStream.New
    	Debug.Print App.ThreadID, "New Filestream created: ", FilePath, Mode
        
        This.Mode = Mode
        This.FilePath = FilePath
        Set This.Stream = New ADODB.Stream
        This.Stream.Type = StreamTypeEnum.adTypeBinary
        This.Stream.Open

        If This.Mode = FileMode.ForReading Then
            This.Stream.LoadFromFile This.FilePath
        End If
    End Sub

    Private Sub Class_Terminate()
        Debug.Print App.ThreadID, "Filestream terminated"
        
        If This.Stream IsNot Nothing Then
            If This.Mode = FileMode.ForWriting Then
                ' Debug.Print "Saving: ", This.FilePath, This.Stream.Position
                ' If This.Stream.Size > 0 Then
                '     If This.Stream.Position <> 0 Then
                '         This.Stream.Position = 0
                '     End If
                    CheckAndCreateMissingSubFolders FSO.GetParentFolderName(This.FilePath)
                    This.Stream.SaveToFile This.FilePath, SaveOptionsEnum.adSaveCreateOverWrite
                ' End If
            End If
            This.Stream.Close
            Set This.Stream = Nothing
        End If
    End Sub

    Private Sub Read(ByVal data As LongPtr, ByVal size As Long, ByRef processedSize As Long) Implements ISequentialInStream.Read, IInStream.Read
        Debug.Print App.ThreadID, "Filestream::Read called", size

        If This.Mode <> FileMode.ForReading Then
            If VarPtr(processedSize) <> 0 Then
                processedSize = 0
            End If
            Exit Sub
        End If

        Dim StartPos As Long = This.Stream.Position
        If size > (This.Stream.Size - This.Stream.Position) Then
            size = (This.Stream.Size - This.Stream.Position)
        End If

        If size > 0 Then
            Dim Buffer() As Byte
            Buffer = This.Stream.Read(size)
            RtlMoveMemory ByVal data, Buffer(0), size
        End If

        If VarPtr(processedSize) <> 0 Then
            processedSize = This.Stream.Position - StartPos
        End If

        Debug.Print StartPos, size, If(VarPtr(processedSize) <> 0, processedSize, "N/A"), This.Stream.Position
    End Sub

    Private Sub Seek(ByVal offset As LongLong, ByVal seekOrigin As Long, ByRef newPosition As LongLong) Implements IInStream.Seek, IOutStream.Seek
        Debug.Print App.ThreadID, "Filestream::Seek called", seekOrigin, offset
        Const E_NEGATIVE_SEEK As Long = &H80070083&

    	Select Case seekOrigin
            Case StreamSeekOrigin.SZ_SEEK_SET
                This.Stream.Position = TruncateToLong(offset)
            Case StreamSeekOrigin.SZ_SEEK_CUR
                This.Stream.Position += TruncateToLong(offset)
            Case StreamSeekOrigin.SZ_SEEK_END
                This.Stream.Position = This.Stream.Size
        End Select
        If VarPtr(newPosition) <> 0 Then newPosition = This.Stream.Position
        
        Debug.Print "Seek:", seekOrigin, offset, This.Stream.Position
    End Sub

    Private Sub Write(ByVal data As LongPtr, ByVal size As Long, ByRef processedSize As Long) Implements ISequentialOutStream.Write, IOutStream.Write
        Debug.Print App.ThreadID, "Filestream::Write called", size
        If This.Mode <> FileMode.ForWriting Then
            If VarPtr(processedSize) <> 0 Then
                processedSize = 0
            End If
            Exit Sub
        End If

        Dim StartPos As Long = This.Stream.Position

        ReDim Buffer(0 To size - 1) As Byte
        RtlMoveMemory Buffer(0), ByVal data, size
        This.Stream.Write Buffer

        processedSize = This.Stream.Position - StartPos
    End Sub

    Private Sub SetSize(ByVal newSize As LongLong) Implements IOutStream.SetSize
        Debug.Print App.ThreadID, "Filestream::SetSize called"
    	'Ignored
    End Sub

    Private Sub OutStreamFinish() Implements IOutStreamFinish.OutStreamFinish
    	Debug.Print App.ThreadID, "Filestream::OutStreamFinish called"
    End Sub

    Private Sub GetProps( _
        ByRef size As LongLong, _
        ByRef cTime As FILETIME, _
        ByRef aTime As FILETIME, _
        ByRef mTime As FILETIME, _
        ByRef attrib As Long _
    ) Implements IStreamGetProps.GetProps
        Debug.Print App.ThreadID, "IStreamGetProps::GetProps called"
    	With FSO.GetFile(This.FilePath)
            If VarPtr(size) Then size = .Size
            If VarPtr(cTime) Then PropVariantToFileTime(.DateCreated, PSTIME_FLAGS.PSTF_LOCAL, cTime)
            If VarPtr(aTime) Then PropVariantToFileTime(.DateLastAccessed, PSTIME_FLAGS.PSTF_LOCAL, aTime)
            If VarPtr(mTime) Then PropVariantToFileTime(.DateLastModified, PSTIME_FLAGS.PSTF_LOCAL, mTime)
            If VarPtr(attrib) Then attrib = .Attributes
        End With
    End Sub

    Private Sub GetProps2(ByRef props As CStreamFileProps) Implements IStreamGetProps2.GetProps2
        Debug.Print App.ThreadID, "IStreamGetProps2::GetProp2s called"
        With FSO.GetFile(This.FilePath)
            props.Size = .Size
            PropVariantToFileTime(.DateCreated, PSTIME_FLAGS.PSTF_LOCAL, props.CTime)
            PropVariantToFileTime(.DateLastAccessed, PSTIME_FLAGS.PSTF_LOCAL, props.ATime)
            PropVariantToFileTime(.DateLastModified, PSTIME_FLAGS.PSTF_LOCAL, props.MTime)
            props.Attribs = .Attributes
        End With
    End Sub

    Private Sub GetSize(ByRef size As LongLong) Implements IStreamGetSize.GetSize
        Debug.Print App.ThreadID, "IStreamGetSize::GetSize called", This.FilePath
        size = FSO.GetFile(This.FilePath).Size
    End Sub
End Class