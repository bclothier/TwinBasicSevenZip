[ COMCreatable (False) ]
[ Description ("Views the contents of an archive file and its properties.") ]
[ ClassId ("64835F4D-2D7B-485A-AFAB-24746EE9B027") ]
Public Class ArchiveViewer
    Implements IArchiveOpenCallback

    Private Type TData
        ArchivePath As String
        InArchive As IInArchive
        InFileStream As Filestream
        Entries As ArchiveEntries
        Properties As ArchiveProperties
        ProgressView As IProgressView
        ArchiveFileSize As long
        CurrentFiles As LongLong
        CurrentBytes As LongLong
    End Type
    Private This As TData

    Friend Sub New(ArchivePath As String, Optional ProgressView As IProgressView)
        Dim Extension As String = FSO.GetExtensionName(ArchivePath)
        If LibraryInstance.Manager.IsSupportedFormat(Extension) = False Then
            Err.Raise 5, CurrentProcedureName, GetErrorUnsupportedFormatString("view", Extension)
        End If

        Set This.ProgressView = ProgressView
        
        This.ArchivePath = ArchivePath
        Set This.InFileStream = New Filestream(This.ArchivePath, FileMode.ForReading)
        
        Set This.InArchive = Manager.CreateInArchive(GetFormatFromFileExtension(FSO.GetExtensionName(This.ArchivePath)))
        This.ArchiveFileSize = FSO.GetFile(This.ArchivePath).Size
        SetupProgress()
        Dim ScanSize As LongLong = 8388608
        This.InArchive.Open This.InFileStream, ScanSize, Me
    End Sub

    Friend Property Get InArchive() As IInArchive
        Return This.InArchive
    End Property

    Private Sub SetTotal(ByRef files As LongLong, ByRef bytes As LongLong) Implements IArchiveOpenCallback.SetTotal
        Err.ReturnHResult = UpdateProgress(files, bytes)
    	' Debug.Print "IArchiveOpenCallback::SetTotal", Timer
        ' Debug.Print "   files: ", If(VarPtr(files), files, "<NULL>")
        ' Debug.Print "   bytes: ", If(VarPtr(bytes), bytes, "<NULL>")
        ' Debug.Print ""
    End Sub
    
    Private Sub SetCompleted(ByRef files As LongLong, ByRef bytes As LongLong) Implements IArchiveOpenCallback.SetCompleted
        Err.ReturnHResult = UpdateProgress(files, bytes)
    	' Debug.Print "IArchiveOpenCallback::SetCompleted", Timer
        ' Debug.Print "   files: ", If(VarPtr(files), files, "<NULL>")
        ' Debug.Print "   bytes: ", If(VarPtr(bytes), bytes, "<NULL>")
        ' Debug.Print ""
    End Sub

    Private Sub SetupProgress()
        If This.ProgressView Is Nothing Then
            Exit Sub
        End If

        With This.ProgressView
            .ProgressValue = 0
            .ProgressMax = This.ArchiveFileSize
            If .Indeterminate Then
                .Indeterminate = False
            End If
            .UpdateCaptions "Opening archive '" & FSO.GetFileName (This.ArchivePath) & "'"
        End With
    End Sub

    Private Function UpdateProgress(Files As LongLong, Bytes As LongLong) As CommonHResults
        If This.ProgressView Is Nothing Then
            Return CommonHResults.S_OK
        End If

        With This.ProgressView
            If .CancellationRequested Then
                Return CommonHResults.E_ABORT
            End If
            If VarPtr(Files) Then
                If Files > This.CurrentFiles OrElse Bytes > This.CurrentBytes Then
                    This.CurrentFiles = Files
                    .UpdateCaptions , This.CurrentFiles & " files read."
                End If
            End If
            If VarPtr(Bytes) Then
                If Bytes > This.CurrentBytes Then
                    This.CurrentBytes = Bytes
                    .UpdateProgress(TruncateToLong(This.CurrentBytes))
                End If
            End If
        End With

        Return CommonHResults.S_OK
    End Function

    [ Description ("A list of files or folders present in the given archive files.") ]
    Public Property Get Entries() As ArchiveEntries
        If This.Entries Is Nothing Then
    	    Set This.Entries = New ArchiveEntries(This.InArchive)
        End If
        Return This.Entries
    End Property

    [ Description ("Archive file's properties") ]
    Public Property Get Properties() As ArchiveProperties
    	If This.Properties Is Nothing Then
            Set This.Properties = New ArchiveProperties(This.InArchive)
        End If
        Return This.Properties
    End Property
End Class