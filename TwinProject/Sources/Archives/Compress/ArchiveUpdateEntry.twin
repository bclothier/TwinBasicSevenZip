[ COMCreatable (False) ]
[ Description ("Provide metadata about an entry to be added to a new archive as part of compression.") ]
[ ClassId ("8C0B1BEA-16AF-47A3-AA51-BC2D68BF4A5C") ]
Public Class ArchiveUpdateEntry
    Private Type TData
        Path As String
        Extension As String
        IsAnti As Boolean
        IsDirectory As Boolean
        Size As LongLong
        Attributes As Long
        CreationTime As Date
        LastAccessTime As Date
        LastWriteTime As Date
        Comment As String
    End Type
    Private This As TData

    Friend Sub New(Path As String, Optional Comment As String, Optional Attributes As Long)
        If FSO.FileExists(Path) Then
            This.Path = Path
            This.Extension = FSO.GetExtensionName(Path)
            With FSO.GetFile(Path)
                This.Size = .Size
                This.Attributes = If(Attributes = 0, .Attributes, Attributes)
                This.CreationTime = .DateCreated
                This.LastAccessTime = .DateLastAccessed
                This.LastWriteTime = .DateLastModified
            End With
        ElseIf FSO.FolderExists(Path) Then
            This.Path = Path
            This.IsDirectory = True
            With FSO.GetFolder(Path)
                This.Attributes = If(Attributes = 0, .Attributes, Attributes)
                This.CreationTime = .DateCreated
                This.LastAccessTime = .DateLastAccessed
                This.LastWriteTime = .DateLastModified
            End With
        Else
            Err.Raise 53, "The path '" & Path & "' does not seem to be a valid path."
        End If

        This.Comment = Comment
    End Sub

    [ Description ("The complete path to the entry relevant to the archive file as a root. For example, if 'C:\Temp' is compressed into a new 'C:\Temp.zip', and the entry is for a 'C:\Temp\Foo\Bar.txt', then the path will be 'Foo\Bar.txt'.") ]
    Public Property Get Path() As String
    	Return This.Path
    End Property

    Public Property Let Path(NewValue As String)
        This.Path = Path
    End Property

    [ Description ("The file extension for the archive entry.") ]
    Public Property Get Extension() As String
        Return This.Extension
    End Property

    Public Property Let Extension(NewValue As String)
    	This.Extension = NewValue
    End Property

    [ Description ("If set to true, the entry will delete the given path when extracted. Only works in a 7z format.") ]
    Public Property Get IsAnti() As Boolean
        Return This.IsAnti
    End Property

    Public Property Let IsAnti(NewValue As Boolean)
        This.IsAnti = NewValue
    End Property
    
    [ Description ("Indicates that the entry represents a directory / folder, not a file.") ]
    Public Property Get IsDirectory() As Boolean
        Return This.IsDirectory
    End Property

    Public Property Let IsDirectory(NewValue As Boolean)
        This.IsDirectory = NewValue
    End Property
    
    [ Description ("The original unpacked size of the entry.") ]
    Public Property Get Size() As LongLong
        Return This.Size
    End Property

    Public Property Let Size(NewValue As LongLong)
        This.Size = NewValue
    End Property

    [ Description ("the attributes of a file. On Windows, it corresponds to VBA.VBFileAttribute enum.") ]
    Public Property Get Attributes() As Long
        Return This.Attributes
    End Property

    Public Property Let Attributes(NewValue As Long)
        This.Attributes = NewValue
    End Property

    [ Description ("Timestamp when the entry was created.") ]
    Public Property Get CreationTime() As Date
        Return This.CreationTime
    End Property

    Public Property Let CreationTime(NewValue As Date)
    	This.CreationTime = NewValue
    End Property

    [ Description ("Timestamp when the entry was last accessed.") ]
    Public Property Get LastAccessTime() As Date
        Return This.LastAccessTime
    End Property

    Public Property Let LastAccessTime(NewValue As Date)
    	This.LastAccessTime = NewValue
    End Property

    [ Description ("Timestamp when the entry was last modified.") ]
    Public Property Get LastWriteTime() As Date
        Return This.LastWriteTime
    End Property

    Public Property Let LastWriteTime(NewValue As Date)
    	This.LastWriteTime = NewValue
    End Property

    [ Description ("Optional; provide comments for description. This is only used when viewing an archive.") ]
    Public Property Get Comment() As String
        Return This.Comment
    End Property

    Public Property Let Comment(NewValue As String)
    	This.Comment = NewValue
    End Property
End Class