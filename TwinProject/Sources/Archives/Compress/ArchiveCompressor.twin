[ COMCreatable (False) ]
[ Description ("Create new archive files by providing files or folders to the compressor.") ]
[ ClassId ("4D38E1D0-840E-4EC6-8F0A-AE5B8D859C9B") ]
Public Class ArchiveCompressor
    Implements IProgress
    Implements IArchiveUpdateCallback
    Implements IArchiveUpdateCallback2
    Implements IArchiveUpdateCallbackFile
    Implements IArchiveExtractCallbackMessage

    Private Type TData
        OutArchive As IOutArchive
        OutFileStream As IFilestream
        Entries As ArchiveUpdateEntries
    	ArchivePath As String
        DestinationPath As String
        CommonPath As String
        ProgressView As IProgressView
        EntriesProcessed As Long
        EntriesTotal As Long
        CompressionProcessed As Long
        CompressionTotal As Long
        DisplayName As String
        IsCompressing As Boolean
    End Type
    Private This As TData

    Public Sub New()
        Set This.Entries = New ArchiveUpdateEntries
    End Sub

    Public Sub New(Entries As ArchiveUpdateEntries, ProgressView As IProgressView)
    	Set This.Entries = Entries
        Set This.ProgressView = ProgressView
    End Sub

    [ Description ("A list of files or folders to be included in the new archive to be created when Compress method is called.") ]
    Public Property Get Entries() As ArchiveUpdateEntries
    	Return This.Entries
    End Property

    [ Description ("Create a new archive path at the given path using the supplied files & folders stored in the Entries properties.") ]
    Public Sub Compress(ArchivePath As String)
        Dim Extension As String = FSO.GetExtensionName(ArchivePath)
        If LibraryInstance.Manager.IsSupportedFormat(Extension) = False Then
            Err.Raise 5, CurrentProcedureName, GetErrorUnsupportedFormatString("create", Extension)
        End If

        Dim Count As Long = This.Entries.Count
        This.CommonPath = This.Entries.GetCommonPath()

    	This.ArchivePath = ArchivePath
        Set This.OutFileStream = FilestreamFactory.Create(This.ArchivePath, FileMode.ForWriting)
        Set This.OutArchive = Manager.CreateOutArchive(GetFormatFromFileExtension(FSO.GetExtensionName(This.ArchivePath)))

        This.CompressionTotal = Count
        This.EntriesTotal = Count

        This.OutArchive.UpdateItems(This.OutFileStream, Count, Me)

        Set This.OutArchive = Nothing
        Set This.OutFileStream = Nothing
    End Sub

    Private Sub SetTotal(ByVal total As LongLong) Implements IProgress.SetTotal, IArchiveUpdateCallback.SetTotal, IArchiveUpdateCallback2.SetTotal, IArchiveExtractCallbackMessage.SetTotal
    	' Debug.Print "IArchiveUpdateCallback::SetTotal", Timer, App.ThreadID
        ' Debug.Print "   total: ", If(VarPtr(total), total, "<NULL>")
        ' Debug.Print ""
    End Sub

    Private Sub SetCompleted(ByRef completeValue As LongLong) Implements IProgress.SetCompleted, IArchiveUpdateCallback.SetCompleted, IArchiveUpdateCallback2.SetCompleted, IArchiveExtractCallbackMessage.SetCompleted
    	' Debug.Print "IArchiveUpdateCallback::SetCompleted", Timer, App.ThreadID
        ' Debug.Print "   completeValue: ", If(VarPtr(completeValue), completeValue, "<NULL>")
        ' Debug.Print ""
    End Sub

    Private Sub GetUpdateItemInfo(ByVal index As Long, ByRef newData As Long, ByRef newProps As Long, ByRef indexInArchive As Long) Implements IArchiveUpdateCallback.GetUpdateItemInfo, IArchiveUpdateCallback2.GetUpdateItemInfo
        ' Debug.Print "IArchiveUpdateCallback::GetUpdateItemInfo", index, Timer, GetCurrentThreadId

        If UpdateProgress(index + 1, This.Entries.Count, FSO.GetFileName(This.Entries.Item(index).Path), False) = False Then
            Err.ReturnHResult = CommonHResults.E_ABORT
            Exit Sub
        End If

        If VarPtr(newData) <> 0 Then newData = 1
        If VarPtr(newProps) <> 0 Then newProps = 1
        If VarPtr(indexInArchive) <> 0 Then indexInArchive = -1
    End Sub

    Private Sub GetProperty(ByVal index As Long, ByVal propID As Long, ByRef value As Variant) Implements IArchiveUpdateCallback.GetProperty, IArchiveUpdateCallback2.GetProperty
        ' Debug.Print "IArchiveUpdateCallback::GetProperty", index, ItemPropIdAsString(propID, CStr(propID)), Timer, GetCurrentThreadId

        Dim Entry As ArchiveUpdateEntry = This.Entries.Item(index)
        Dim tmp As Variant
        Dim vt As VARENUM

        Select Case propID
            Case ItemPropId.Path
                tmp = Replace$(Entry.Path, This.CommonPath, vbNullString)
                vt = VARENUM.VT_BSTR
            Case ItemPropId.Extension
                tmp = Entry.Extension
                vt = VARENUM.VT_BSTR
            Case ItemPropId.IsAnti
                tmp = False
                vt = VARENUM.VT_BOOL
            Case ItemPropId.IsDirectory
                tmp = Entry.IsDirectory
                vt = VARENUM.VT_BOOL
            Case ItemPropId.Size
                tmp = Entry.Size
                vt = VARENUM.VT_UI8
            Case ItemPropId.Attributes
                tmp = Entry.Attributes
                vt = VARENUM.VT_UI4
            Case ItemPropId.CreationTime
                Err.ReturnHResult = TryConvertDateToFileTimeAsPropVariant(Entry.CreationTime, value)
                Exit Sub
            Case ItemPropId.LastAccessTime
                Err.ReturnHResult = TryConvertDateToFileTimeAsPropVariant(Entry.LastAccessTime, value)
                Exit Sub
            Case ItemPropId.LastWriteTime
                Err.ReturnHResult = TryConvertDateToFileTimeAsPropVariant(Entry.LastWriteTime, value)
                Exit Sub
            Case ItemPropId.Comment
                tmp = Entry.Comment
                vt = VARENUM.VT_BSTR
        End Select

        ' 7-zip does not like being passed null pointers for BSTRs
        If VarType(tmp) = vbString AndAlso StrPtr(tmp) = 0 Then
            tmp = ""
        End If

        Err.ReturnHResult = PropVariantChangeType(value, tmp, &H0, vt)
        ' Debug.Print "IArchiveUpdateCallback::GetProperty", value
    End Sub

    Private Sub GetStream(ByVal index As Long, ByRef inStream As ISequentialInStream) Implements IArchiveUpdateCallback.GetStream, IArchiveUpdateCallback2.GetStream
        ' Debug.Print "IArchiveUpdateCallback::GetStream", Timer, GetCurrentThreadId
        
        Dim Entry As ArchiveUpdateEntry
        Set Entry = This.Entries.Item(index)
        
        If UpdateProgress(index + 1, This.Entries.Count, FSO.GetFileName(This.Entries.Item(index).Path), True) = False Then
            Err.ReturnHResult = CommonHResults.E_ABORT
            Exit Sub
        End If

        If Entry.IsDirectory Then
            Set inStream = Nothing
        Else
            Set inStream = FilestreamFactory.Create(Entry.Path, FileMode.ForReading)
        End If
        ' Debug.Print "IArchiveUpdateCallback::GetStream Exit", App.ThreadID
    End Sub

    Private Sub SetOperationResult(ByVal operationResult As Long) Implements IArchiveUpdateCallback.SetOperationResult, IArchiveUpdateCallback2.SetOperationResult
        ' Debug.Print "IArchiveUpdateCallback::SetOperationResult", Timer
        ' Debug.Print "   operationResult: ", operationResult
        ' Debug.Print ""
    End Sub

    Private Sub GetVolumeSize(ByVal index As Long, ByRef size As LongLong) Implements IArchiveUpdateCallback2.GetVolumeSize
        ' Debug.Print "IArchiveUpdateCallback::GetVolumeSize"
    End Sub

    Private Sub GetVolumeStream(ByVal index As Long, ByRef volumeStream As ISequentialOutStream) Implements IArchiveUpdateCallback2.GetVolumeStream
        ' Debug.Print "IArchiveUpdateCallback::GetVolumeStream"
    End Sub

    Private Function TryConvertDateToFileTimeAsPropVariant(ByVal InputDate As Variant, ByRef OutResult As Variant) As Long
        Dim hr As Long
        Dim ft As FILETIME
        hr = PropVariantToFileTime(InputDate, PSTIME_FLAGS.PSTF_LOCAL, ft)
        If hr = 0 Then
            Return InitPropVariantFromFileTime(ft, OutResult)
        Else
            Return hr
        End If
    End Function

    Private Function UpdateProgress( _
        Optional BytesCompleted As Long, _ 
        Optional BytesTotal As Long, _ 
        Optional ItemName As String, _ 
        Optional IsCompressing As Boolean _
    ) As Boolean
        Dim UpdateNeeded As Boolean

        If This.ProgressView Is Nothing Then
            Return True
        End If

        With This.ProgressView
            If .CancellationRequested Then
                Return False
            End If

            .Indeterminate = (BytesCompleted = 0 AndAlso BytesTotal = 0)
            If This.IsCompressing <> IsCompressing Then
                This.IsCompressing = IsCompressing
            End If

            If This.IsCompressing Then
                If BytesTotal _ 
                AndAlso BytesTotal > This.CompressionTotal Then
                    This.CompressionTotal = BytesTotal
                    UpdateNeeded = True
                End If

                If BytesCompleted _ 
                AndAlso BytesCompleted > This.CompressionProcessed Then
                    This.CompressionProcessed = BytesCompleted
                    UpdateNeeded = True
                End If
            Else
                If BytesTotal _ 
                AndAlso BytesTotal > This.EntriesTotal Then
                    This.EntriesTotal = BytesTotal
                    UpdateNeeded = True
                End If

                If BytesCompleted _ 
                AndAlso BytesCompleted > This.EntriesProcessed Then
                    This.EntriesProcessed = BytesCompleted
                    UpdateNeeded = True
                End If
            End If

            If Len(ItemName) > 0 _
            AndAlso ItemName <> This.DisplayName Then
                This.DisplayName = ItemName
                UpdateNeeded = True
            End If

            If .CancellationRequested Then
                Return False
            End If

            If UpdateNeeded Then
                .UpdateCaptions _
                    If(IsCompressing, "Compressing ", "Creating an entry for ") & This.DisplayName, _
                    "Processed " & This.EntriesProcessed & " out of " & This.EntriesTotal & " entries." & vbNewLine & _
                    "Compressed " & This.CompressionProcessed & " out of " & This.CompressionTotal & " files."
                .UpdateProgress(This.EntriesProcessed + This.CompressionProcessed, This.EntriesTotal + This.CompressionTotal)
            End If

            If .CancellationRequested Then
                Return False
            End If
        End With
        
        Return True
    End Function

    Private Sub GetStream2(ByVal index As Long, ByRef inStream As ISequentialInStream, ByVal notifyOp As Long) Implements IArchiveUpdateCallbackFile.GetStream2
        Debug.Print "IArchiveUpdateCallbackFile::GetStream2 called", index, notifyOp
        GetStream(index, inStream)
    End Sub

    Private Sub ReportOperation(ByVal indextype As Long, ByVal index As Long, ByVal notifyOp As Long) Implements IArchiveUpdateCallbackFile.ReportOperation
    	Debug.Print "IArchiveUpdateCallbackFile::ReportOperation called", indextype, index, notifyOp
    End Sub

    Private Sub ReportExtractResult( _
        ByVal indexType As Long, _
        ByVal index As Long, _ 
        ByVal opRes As Long _
    ) Implements IArchiveExtractCallbackMessage.ReportExtractResult
        ' Debug.Print "IArchiveExtractCallbackMessage::ReportExtractResult", indexType, index, opRes
    End Sub
End Class