[ COMCreatable (False) ]
[ Description ("Extracts an existing archive file into a specified folder.") ]
[ ClassId ("0BF536D6-8EE3-4AC7-B8D7-926E74835178") ]
Public Class ArchiveExtractor
    Implements ArchiveViewer Via Viewer
    Implements IArchiveExtractCallback

    Private Type TData
    	ArchivePath As String
        InArchive As IInArchive
        InFileStream As Filestream
        DestinationPath As String
        ProgressView As IProgressView
        Processed As Long
        Total As Long
        DisplayName As String
    End Type
    Private This As TData

    Public Sub New(ArchivePath As String, Optional ProgressView As IProgressView)
        Dim Extension As String = FSO.GetExtensionName(ArchivePath)
        If LibraryInstance.Manager.IsSupportedFormat(Extension) = False Then
            Err.Raise 5, CurrentProcedureName, GetErrorUnsupportedFormatString("extract", Extension)
        End If

        Set This.ProgressView = ProgressView
        This.ArchivePath = ArchivePath
        Set Viewer = New ArchiveViewer(This.ArchivePath, This.ProgressView)
        Set This.InArchive = Viewer.InArchive
    End Sub

    Private Sub Class_Terminate()
        Set This.ProgressView = Nothing
        Set This.InFileStream = Nothing
    	Set This.InArchive = Nothing
    End Sub

    [ Description ("Performs the extraction into the destination. The destination must be a folder. If the folder does not exist, it will be created automatically.") ]
    Public Sub Extract(DestinationPath As String)
        This.DestinationPath = DestinationPath
        CheckAndCreateMissingSubFolders(This.DestinationPath)
        This.InArchive.Extract(0, -1, False, Me)
    End Sub
    
    Private Sub SetTotal(ByVal total As LongLong) Implements IArchiveExtractCallback.SetTotal
        ' If VarPtr(total) = 0 Then
        '     Exit Sub
        ' End If
        ' If UpdateProgress(BytesTotal:=TruncateToLong(total)) = False Then
        '     Err.ReturnHResult = CommonHResults.E_ABORT
        '     Exit Sub
        ' End If
    	' Debug.Print "IArchiveExtractCallback::SetTotal", Timer
        ' Debug.Print "   total: ", If(VarPtr(total), total, "<NULL>")
        ' Debug.Print ""
    End Sub
    
    Private Sub SetCompleted(ByRef completeValue As LongLong) Implements IArchiveExtractCallback.SetCompleted
        ' If VarPtr(completeValue) = 0 Then
        '     Exit Sub
        ' End If
        ' If UpdateProgress(BytesCompleted:=TruncateToLong(completeValue)) = False Then
        '     Err.ReturnHResult = CommonHResults.E_ABORT
        '     Exit Sub
        ' End If
    	' Debug.Print "IArchiveExtractCallback::SetCompleted", Timer
        ' Debug.Print "   completeValue: ", If(VarPtr(completeValue), completeValue, "<NULL>")
        ' Debug.Print ""
    End Sub
    
    Private Sub GetStream(ByVal index As Long, ByRef outStream As ISequentialOutStream, ByVal askExtractMode As Long) Implements IArchiveExtractCallback.GetStream
        Debug.Print "IArchiveExtractCallback::GetStream", Timer, GetCurrentThreadId
        
        Dim ItemName As Variant
        This.InArchive.GetProperty(index, ItemPropId.Path, ItemName)

        If Len(ItemName) = 0 Then
            This.InArchive.GetProperty(index, ItemPropId.Name, ItemName)
        End If

        Dim Count As Long
        This.InArchive.GetNumberOfItems(Count)
            
        If Len(ItemName) = 0 Then
            Dim Extension As String = "." & FSO.GetExtensionName(This.ArchivePath)
            Dim FileName As String = FSO.GetFileName(This.ArchivePath)

            If Right$(FileName, Len(Extension)) = Extension Then
                FileName = Left$(FileName, Len(FileName) - Len(Extension))
            End If

            If Count = 1 Then
                ItemName = FileName
            Else
                ItemName = FileName & "_" & Right$("000" & index, 3)
            End If
        End If

        Dim FullPath As String = FSO.BuildPath(This.DestinationPath, ItemName)

        If askExtractMode = AskMode.Extract Then
            Dim IsDirectory As Variant
            This.InArchive.GetProperty(index, ItemPropId.IsDirectory, IsDirectory)
            If IsDirectory = False Then
                Dim EntryAttributes As Variant
                This.InArchive.GetProperty(index, ItemPropId.Attributes, EntryAttributes)
                IsDirectory = (EntryAttributes And vbDirectory) = vbDirectory
            End If

            If UpdateProgress(index + 1, Count, ItemName:=FSO.GetFileName(FullPath)) = False Then
                Err.ReturnHResult = CommonHResults.E_ABORT
                Exit Sub
            End If

            If IsDirectory AndAlso Not FSO.FolderExists(FullPath) Then
                CheckAndCreateMissingSubFolders(FullPath)
            End If

            Set outStream = New Filestream(FullPath, FileMode.ForWriting)
        End If
    End Sub

    Private Sub PrepareOperation(ByVal askExtractMode As Long) Implements IArchiveExtractCallback.PrepareOperation
    	' Debug.Print "IArchiveExtractCallback::PrepareOperation", Timer
        ' Debug.Print "   askExtractMode: ", askExtractMode
        ' Debug.Print ""
    End Sub

    Private Sub SetOperationResult(ByVal opRes As Long) Implements IArchiveExtractCallback.SetOperationResult
    	' Debug.Print "IArchiveExtractCallback::SetOperationResult", Timer
        ' Debug.Print "   askExtractMode: ", opRes
        ' Debug.Print ""
    End Sub

    Private Function UpdateProgress( _
        Optional BytesCompleted As Long, _ 
        Optional BytesTotal As Long, _ 
        Optional ItemName As String _
    ) As Boolean
        Dim UpdateNeeded As Boolean

        If This.ProgressView Is Nothing Then
            Return True
        End If

        With This.ProgressView
            If .CancellationRequested Then
                Return False
            End If

            .Indeterminate = (BytesCompleted = 0 AndAlso BytesTotal = 0)
            
            If BytesTotal _ 
            AndAlso BytesTotal > This.Total Then
                This.Total = BytesTotal
                UpdateNeeded = True
            End If

            If BytesCompleted _ 
            AndAlso BytesCompleted > This.Processed Then
                This.Processed = BytesCompleted
                UpdateNeeded = True
            End If

            If Len(ItemName) > 0 _
            AndAlso ItemName <> This.DisplayName Then
                This.DisplayName = ItemName
                UpdateNeeded = True
            End If

            If .CancellationRequested Then
                Return False
            End If

            If UpdateNeeded Then
                .UpdateCaptions _
                    "Extracting " & This.DisplayName, _
                    "Processed " & This.Processed & " out of " & This.Total & " files."
                .UpdateProgress(This.Processed, This.Total)
            End If

            If .CancellationRequested Then
                Return False
            End If
        End With
        
        Return True
    End Function
End Class